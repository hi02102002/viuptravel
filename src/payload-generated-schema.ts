/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:db-schema` to regenerate this file.
 */

import type {} from '@payloadcms/db-postgres'
import {
  pgTable,
  index,
  uniqueIndex,
  foreignKey,
  serial,
  varchar,
  timestamp,
  numeric,
  integer,
  jsonb,
  text,
  boolean,
  pgEnum,
} from '@payloadcms/db-postgres/drizzle/pg-core'
import { sql, relations } from '@payloadcms/db-postgres/drizzle'
export const enum_categories_type = pgEnum('enum_categories_type', ['post', 'tour'])
export const enum_header_blocks_nav_link_3_custom_url = pgEnum(
  'enum_header_blocks_nav_link_3_custom_url',
  ['internal', 'external'],
)
export const enum_header_blocks_nav_link_2_custom_url = pgEnum(
  'enum_header_blocks_nav_link_2_custom_url',
  ['internal', 'external'],
)
export const enum_header_blocks_nav_link_1_custom_url = pgEnum(
  'enum_header_blocks_nav_link_1_custom_url',
  ['internal', 'external'],
)

export const users = pgTable(
  'users',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    email: varchar('email').notNull(),
    resetPasswordToken: varchar('reset_password_token'),
    resetPasswordExpiration: timestamp('reset_password_expiration', {
      mode: 'string',
      withTimezone: true,
      precision: 3,
    }),
    salt: varchar('salt'),
    hash: varchar('hash'),
    loginAttempts: numeric('login_attempts').default('0'),
    lockUntil: timestamp('lock_until', { mode: 'string', withTimezone: true, precision: 3 }),
  },
  (columns) => ({
    users_updated_at_idx: index('users_updated_at_idx').on(columns.updatedAt),
    users_created_at_idx: index('users_created_at_idx').on(columns.createdAt),
    users_email_idx: uniqueIndex('users_email_idx').on(columns.email),
  }),
)

export const media = pgTable(
  'media',
  {
    id: serial('id').primaryKey(),
    alt: varchar('alt'),
    prefix: varchar('prefix').default('media'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    url: varchar('url'),
    thumbnailURL: varchar('thumbnail_u_r_l'),
    filename: varchar('filename'),
    mimeType: varchar('mime_type'),
    filesize: numeric('filesize'),
    width: numeric('width'),
    height: numeric('height'),
    focalX: numeric('focal_x'),
    focalY: numeric('focal_y'),
  },
  (columns) => ({
    media_updated_at_idx: index('media_updated_at_idx').on(columns.updatedAt),
    media_created_at_idx: index('media_created_at_idx').on(columns.createdAt),
    media_filename_idx: uniqueIndex('media_filename_idx').on(columns.filename),
  }),
)

export const posts_meta_keywords = pgTable(
  'posts_meta_keywords',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    keyword: varchar('keyword'),
  },
  (columns) => ({
    _orderIdx: index('posts_meta_keywords_order_idx').on(columns._order),
    _parentIDIdx: index('posts_meta_keywords_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [posts.id],
      name: 'posts_meta_keywords_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const posts = pgTable(
  'posts',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    description: varchar('description').notNull(),
    slug: varchar('slug'),
    cover: integer('cover_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    category: integer('category_id').references(() => categories.id, {
      onDelete: 'set null',
    }),
    content: jsonb('content').notNull(),
    publishedAt: timestamp('published_at', { mode: 'string', withTimezone: true, precision: 3 }),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    posts_slug_idx: uniqueIndex('posts_slug_idx').on(columns.slug),
    posts_cover_idx: index('posts_cover_idx').on(columns.cover),
    posts_category_idx: index('posts_category_idx').on(columns.category),
    posts_meta_meta_image_idx: index('posts_meta_meta_image_idx').on(columns.meta_image),
    posts_updated_at_idx: index('posts_updated_at_idx').on(columns.updatedAt),
    posts_created_at_idx: index('posts_created_at_idx').on(columns.createdAt),
  }),
)

export const categories_meta_keywords = pgTable(
  'categories_meta_keywords',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    keyword: varchar('keyword'),
  },
  (columns) => ({
    _orderIdx: index('categories_meta_keywords_order_idx').on(columns._order),
    _parentIDIdx: index('categories_meta_keywords_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [categories.id],
      name: 'categories_meta_keywords_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const categories = pgTable(
  'categories',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    cover: integer('cover_id')
      .notNull()
      .references(() => media.id, {
        onDelete: 'set null',
      }),
    slug: varchar('slug'),
    type: enum_categories_type('type').notNull(),
    description: varchar('description'),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    categories_cover_idx: index('categories_cover_idx').on(columns.cover),
    categories_slug_idx: uniqueIndex('categories_slug_idx').on(columns.slug),
    categories_meta_meta_image_idx: index('categories_meta_meta_image_idx').on(columns.meta_image),
    categories_updated_at_idx: index('categories_updated_at_idx').on(columns.updatedAt),
    categories_created_at_idx: index('categories_created_at_idx').on(columns.createdAt),
  }),
)

export const tours_media_files_media_files = pgTable(
  'tours_media_files_media_files',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    file: integer('file_id').references(() => media.id, {
      onDelete: 'set null',
    }),
  },
  (columns) => ({
    _orderIdx: index('tours_media_files_media_files_order_idx').on(columns._order),
    _parentIDIdx: index('tours_media_files_media_files_parent_id_idx').on(columns._parentID),
    tours_media_files_media_files_file_idx: index('tours_media_files_media_files_file_idx').on(
      columns.file,
    ),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [tours.id],
      name: 'tours_media_files_media_files_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const tours_meta_keywords = pgTable(
  'tours_meta_keywords',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    id: varchar('id').primaryKey(),
    keyword: varchar('keyword'),
  },
  (columns) => ({
    _orderIdx: index('tours_meta_keywords_order_idx').on(columns._order),
    _parentIDIdx: index('tours_meta_keywords_parent_id_idx').on(columns._parentID),
    _parentIDFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [tours.id],
      name: 'tours_meta_keywords_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const tours = pgTable(
  'tours',
  {
    id: serial('id').primaryKey(),
    title: varchar('title').notNull(),
    slug: varchar('slug'),
    private_price: numeric('private_price'),
    group_price: numeric('group_price'),
    informations_informations_departure_from: varchar('informations_informations_departure_from'),
    informations_informations_destination: varchar('informations_informations_destination'),
    informations_informations_schedule: varchar('informations_informations_schedule'),
    informations_informations_start_at: varchar('informations_informations_start_at'),
    metadata_metadata_description: varchar('metadata_metadata_description'),
    metadata_metadata_schedule: jsonb('metadata_metadata_schedule'),
    metadata_metadata_terms: jsonb('metadata_metadata_terms'),
    category: integer('category_id').references(() => categories.id, {
      onDelete: 'set null',
    }),
    meta_title: varchar('meta_title'),
    meta_image: integer('meta_image_id').references(() => media.id, {
      onDelete: 'set null',
    }),
    meta_description: varchar('meta_description'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    tours_slug_idx: uniqueIndex('tours_slug_idx').on(columns.slug),
    tours_category_idx: index('tours_category_idx').on(columns.category),
    tours_meta_meta_image_idx: index('tours_meta_meta_image_idx').on(columns.meta_image),
    tours_updated_at_idx: index('tours_updated_at_idx').on(columns.updatedAt),
    tours_created_at_idx: index('tours_created_at_idx').on(columns.createdAt),
  }),
)

export const payload_locked_documents = pgTable(
  'payload_locked_documents',
  {
    id: serial('id').primaryKey(),
    globalSlug: varchar('global_slug'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_locked_documents_global_slug_idx: index('payload_locked_documents_global_slug_idx').on(
      columns.globalSlug,
    ),
    payload_locked_documents_updated_at_idx: index('payload_locked_documents_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_locked_documents_created_at_idx: index('payload_locked_documents_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_locked_documents_rels = pgTable(
  'payload_locked_documents_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
    mediaID: integer('media_id'),
    postsID: integer('posts_id'),
    categoriesID: integer('categories_id'),
    toursID: integer('tours_id'),
  },
  (columns) => ({
    order: index('payload_locked_documents_rels_order_idx').on(columns.order),
    parentIdx: index('payload_locked_documents_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_locked_documents_rels_path_idx').on(columns.path),
    payload_locked_documents_rels_users_id_idx: index(
      'payload_locked_documents_rels_users_id_idx',
    ).on(columns.usersID),
    payload_locked_documents_rels_media_id_idx: index(
      'payload_locked_documents_rels_media_id_idx',
    ).on(columns.mediaID),
    payload_locked_documents_rels_posts_id_idx: index(
      'payload_locked_documents_rels_posts_id_idx',
    ).on(columns.postsID),
    payload_locked_documents_rels_categories_id_idx: index(
      'payload_locked_documents_rels_categories_id_idx',
    ).on(columns.categoriesID),
    payload_locked_documents_rels_tours_id_idx: index(
      'payload_locked_documents_rels_tours_id_idx',
    ).on(columns.toursID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_locked_documents.id],
      name: 'payload_locked_documents_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_locked_documents_rels_users_fk',
    }).onDelete('cascade'),
    mediaIdFk: foreignKey({
      columns: [columns['mediaID']],
      foreignColumns: [media.id],
      name: 'payload_locked_documents_rels_media_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'payload_locked_documents_rels_posts_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'payload_locked_documents_rels_categories_fk',
    }).onDelete('cascade'),
    toursIdFk: foreignKey({
      columns: [columns['toursID']],
      foreignColumns: [tours.id],
      name: 'payload_locked_documents_rels_tours_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_preferences = pgTable(
  'payload_preferences',
  {
    id: serial('id').primaryKey(),
    key: varchar('key'),
    value: jsonb('value'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_preferences_key_idx: index('payload_preferences_key_idx').on(columns.key),
    payload_preferences_updated_at_idx: index('payload_preferences_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_preferences_created_at_idx: index('payload_preferences_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const payload_preferences_rels = pgTable(
  'payload_preferences_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    usersID: integer('users_id'),
  },
  (columns) => ({
    order: index('payload_preferences_rels_order_idx').on(columns.order),
    parentIdx: index('payload_preferences_rels_parent_idx').on(columns.parent),
    pathIdx: index('payload_preferences_rels_path_idx').on(columns.path),
    payload_preferences_rels_users_id_idx: index('payload_preferences_rels_users_id_idx').on(
      columns.usersID,
    ),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [payload_preferences.id],
      name: 'payload_preferences_rels_parent_fk',
    }).onDelete('cascade'),
    usersIdFk: foreignKey({
      columns: [columns['usersID']],
      foreignColumns: [users.id],
      name: 'payload_preferences_rels_users_fk',
    }).onDelete('cascade'),
  }),
)

export const payload_migrations = pgTable(
  'payload_migrations',
  {
    id: serial('id').primaryKey(),
    name: varchar('name'),
    batch: numeric('batch'),
    updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
    createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 })
      .defaultNow()
      .notNull(),
  },
  (columns) => ({
    payload_migrations_updated_at_idx: index('payload_migrations_updated_at_idx').on(
      columns.updatedAt,
    ),
    payload_migrations_created_at_idx: index('payload_migrations_created_at_idx').on(
      columns.createdAt,
    ),
  }),
)

export const top_header = pgTable('top_header', {
  id: serial('id').primaryKey(),
  email: varchar('email').notNull(),
  phone: varchar('phone').notNull(),
  address: varchar('address'),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const header_blocks_nav_link_3 = pgTable(
  'header_blocks_nav_link_3',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label').notNull(),
    custom_url: enum_header_blocks_nav_link_3_custom_url('custom_url').default('internal'),
    url: varchar('url'),
    is_new_tab: boolean('is_new_tab').default(false),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('header_blocks_nav_link_3_order_idx').on(columns._order),
    _parentIDIdx: index('header_blocks_nav_link_3_parent_id_idx').on(columns._parentID),
    _pathIdx: index('header_blocks_nav_link_3_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header.id],
      name: 'header_blocks_nav_link_3_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header_blocks_nav_link_2 = pgTable(
  'header_blocks_nav_link_2',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label').notNull(),
    custom_url: enum_header_blocks_nav_link_2_custom_url('custom_url').default('internal'),
    url: varchar('url'),
    is_new_tab: boolean('is_new_tab').default(false),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('header_blocks_nav_link_2_order_idx').on(columns._order),
    _parentIDIdx: index('header_blocks_nav_link_2_parent_id_idx').on(columns._parentID),
    _pathIdx: index('header_blocks_nav_link_2_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header.id],
      name: 'header_blocks_nav_link_2_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header_blocks_nav_link_1 = pgTable(
  'header_blocks_nav_link_1',
  {
    _order: integer('_order').notNull(),
    _parentID: integer('_parent_id').notNull(),
    _path: text('_path').notNull(),
    id: varchar('id').primaryKey(),
    label: varchar('label').notNull(),
    custom_url: enum_header_blocks_nav_link_1_custom_url('custom_url').default('internal'),
    url: varchar('url'),
    is_new_tab: boolean('is_new_tab').default(false),
    blockName: varchar('block_name'),
  },
  (columns) => ({
    _orderIdx: index('header_blocks_nav_link_1_order_idx').on(columns._order),
    _parentIDIdx: index('header_blocks_nav_link_1_parent_id_idx').on(columns._parentID),
    _pathIdx: index('header_blocks_nav_link_1_path_idx').on(columns._path),
    _parentIdFk: foreignKey({
      columns: [columns['_parentID']],
      foreignColumns: [header.id],
      name: 'header_blocks_nav_link_1_parent_id_fk',
    }).onDelete('cascade'),
  }),
)

export const header = pgTable('header', {
  id: serial('id').primaryKey(),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const header_rels = pgTable(
  'header_rels',
  {
    id: serial('id').primaryKey(),
    order: integer('order'),
    parent: integer('parent_id').notNull(),
    path: varchar('path').notNull(),
    categoriesID: integer('categories_id'),
    postsID: integer('posts_id'),
    toursID: integer('tours_id'),
  },
  (columns) => ({
    order: index('header_rels_order_idx').on(columns.order),
    parentIdx: index('header_rels_parent_idx').on(columns.parent),
    pathIdx: index('header_rels_path_idx').on(columns.path),
    header_rels_categories_id_idx: index('header_rels_categories_id_idx').on(columns.categoriesID),
    header_rels_posts_id_idx: index('header_rels_posts_id_idx').on(columns.postsID),
    header_rels_tours_id_idx: index('header_rels_tours_id_idx').on(columns.toursID),
    parentFk: foreignKey({
      columns: [columns['parent']],
      foreignColumns: [header.id],
      name: 'header_rels_parent_fk',
    }).onDelete('cascade'),
    categoriesIdFk: foreignKey({
      columns: [columns['categoriesID']],
      foreignColumns: [categories.id],
      name: 'header_rels_categories_fk',
    }).onDelete('cascade'),
    postsIdFk: foreignKey({
      columns: [columns['postsID']],
      foreignColumns: [posts.id],
      name: 'header_rels_posts_fk',
    }).onDelete('cascade'),
    toursIdFk: foreignKey({
      columns: [columns['toursID']],
      foreignColumns: [tours.id],
      name: 'header_rels_tours_fk',
    }).onDelete('cascade'),
  }),
)

export const infor = pgTable('infor', {
  id: serial('id').primaryKey(),
  email: varchar('email'),
  phone: varchar('phone'),
  address: varchar('address'),
  hotline: varchar('hotline'),
  zalo: varchar('zalo'),
  facebook: varchar('facebook'),
  whatsapp: varchar('whatsapp'),
  map: varchar('map'),
  updatedAt: timestamp('updated_at', { mode: 'string', withTimezone: true, precision: 3 }),
  createdAt: timestamp('created_at', { mode: 'string', withTimezone: true, precision: 3 }),
})

export const relations_users = relations(users, () => ({}))
export const relations_media = relations(media, () => ({}))
export const relations_posts_meta_keywords = relations(posts_meta_keywords, ({ one }) => ({
  _parentID: one(posts, {
    fields: [posts_meta_keywords._parentID],
    references: [posts.id],
    relationName: 'meta_keywords',
  }),
}))
export const relations_posts = relations(posts, ({ one, many }) => ({
  cover: one(media, {
    fields: [posts.cover],
    references: [media.id],
    relationName: 'cover',
  }),
  category: one(categories, {
    fields: [posts.category],
    references: [categories.id],
    relationName: 'category',
  }),
  meta_keywords: many(posts_meta_keywords, {
    relationName: 'meta_keywords',
  }),
  meta_image: one(media, {
    fields: [posts.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
}))
export const relations_categories_meta_keywords = relations(
  categories_meta_keywords,
  ({ one }) => ({
    _parentID: one(categories, {
      fields: [categories_meta_keywords._parentID],
      references: [categories.id],
      relationName: 'meta_keywords',
    }),
  }),
)
export const relations_categories = relations(categories, ({ one, many }) => ({
  cover: one(media, {
    fields: [categories.cover],
    references: [media.id],
    relationName: 'cover',
  }),
  meta_keywords: many(categories_meta_keywords, {
    relationName: 'meta_keywords',
  }),
  meta_image: one(media, {
    fields: [categories.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
}))
export const relations_tours_media_files_media_files = relations(
  tours_media_files_media_files,
  ({ one }) => ({
    _parentID: one(tours, {
      fields: [tours_media_files_media_files._parentID],
      references: [tours.id],
      relationName: 'media_files_media_files',
    }),
    file: one(media, {
      fields: [tours_media_files_media_files.file],
      references: [media.id],
      relationName: 'file',
    }),
  }),
)
export const relations_tours_meta_keywords = relations(tours_meta_keywords, ({ one }) => ({
  _parentID: one(tours, {
    fields: [tours_meta_keywords._parentID],
    references: [tours.id],
    relationName: 'meta_keywords',
  }),
}))
export const relations_tours = relations(tours, ({ one, many }) => ({
  media_files_media_files: many(tours_media_files_media_files, {
    relationName: 'media_files_media_files',
  }),
  category: one(categories, {
    fields: [tours.category],
    references: [categories.id],
    relationName: 'category',
  }),
  meta_keywords: many(tours_meta_keywords, {
    relationName: 'meta_keywords',
  }),
  meta_image: one(media, {
    fields: [tours.meta_image],
    references: [media.id],
    relationName: 'meta_image',
  }),
}))
export const relations_payload_locked_documents_rels = relations(
  payload_locked_documents_rels,
  ({ one }) => ({
    parent: one(payload_locked_documents, {
      fields: [payload_locked_documents_rels.parent],
      references: [payload_locked_documents.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_locked_documents_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
    mediaID: one(media, {
      fields: [payload_locked_documents_rels.mediaID],
      references: [media.id],
      relationName: 'media',
    }),
    postsID: one(posts, {
      fields: [payload_locked_documents_rels.postsID],
      references: [posts.id],
      relationName: 'posts',
    }),
    categoriesID: one(categories, {
      fields: [payload_locked_documents_rels.categoriesID],
      references: [categories.id],
      relationName: 'categories',
    }),
    toursID: one(tours, {
      fields: [payload_locked_documents_rels.toursID],
      references: [tours.id],
      relationName: 'tours',
    }),
  }),
)
export const relations_payload_locked_documents = relations(
  payload_locked_documents,
  ({ many }) => ({
    _rels: many(payload_locked_documents_rels, {
      relationName: '_rels',
    }),
  }),
)
export const relations_payload_preferences_rels = relations(
  payload_preferences_rels,
  ({ one }) => ({
    parent: one(payload_preferences, {
      fields: [payload_preferences_rels.parent],
      references: [payload_preferences.id],
      relationName: '_rels',
    }),
    usersID: one(users, {
      fields: [payload_preferences_rels.usersID],
      references: [users.id],
      relationName: 'users',
    }),
  }),
)
export const relations_payload_preferences = relations(payload_preferences, ({ many }) => ({
  _rels: many(payload_preferences_rels, {
    relationName: '_rels',
  }),
}))
export const relations_payload_migrations = relations(payload_migrations, () => ({}))
export const relations_top_header = relations(top_header, () => ({}))
export const relations_header_blocks_nav_link_3 = relations(
  header_blocks_nav_link_3,
  ({ one }) => ({
    _parentID: one(header, {
      fields: [header_blocks_nav_link_3._parentID],
      references: [header.id],
      relationName: '_blocks_nav-link-3',
    }),
  }),
)
export const relations_header_blocks_nav_link_2 = relations(
  header_blocks_nav_link_2,
  ({ one }) => ({
    _parentID: one(header, {
      fields: [header_blocks_nav_link_2._parentID],
      references: [header.id],
      relationName: '_blocks_nav-link-2',
    }),
  }),
)
export const relations_header_blocks_nav_link_1 = relations(
  header_blocks_nav_link_1,
  ({ one }) => ({
    _parentID: one(header, {
      fields: [header_blocks_nav_link_1._parentID],
      references: [header.id],
      relationName: '_blocks_nav-link-1',
    }),
  }),
)
export const relations_header_rels = relations(header_rels, ({ one }) => ({
  parent: one(header, {
    fields: [header_rels.parent],
    references: [header.id],
    relationName: '_rels',
  }),
  categoriesID: one(categories, {
    fields: [header_rels.categoriesID],
    references: [categories.id],
    relationName: 'categories',
  }),
  postsID: one(posts, {
    fields: [header_rels.postsID],
    references: [posts.id],
    relationName: 'posts',
  }),
  toursID: one(tours, {
    fields: [header_rels.toursID],
    references: [tours.id],
    relationName: 'tours',
  }),
}))
export const relations_header = relations(header, ({ many }) => ({
  '_blocks_nav-link-3': many(header_blocks_nav_link_3, {
    relationName: '_blocks_nav-link-3',
  }),
  '_blocks_nav-link-2': many(header_blocks_nav_link_2, {
    relationName: '_blocks_nav-link-2',
  }),
  '_blocks_nav-link-1': many(header_blocks_nav_link_1, {
    relationName: '_blocks_nav-link-1',
  }),
  _rels: many(header_rels, {
    relationName: '_rels',
  }),
}))
export const relations_infor = relations(infor, () => ({}))

type DatabaseSchema = {
  enum_categories_type: typeof enum_categories_type
  enum_header_blocks_nav_link_3_custom_url: typeof enum_header_blocks_nav_link_3_custom_url
  enum_header_blocks_nav_link_2_custom_url: typeof enum_header_blocks_nav_link_2_custom_url
  enum_header_blocks_nav_link_1_custom_url: typeof enum_header_blocks_nav_link_1_custom_url
  users: typeof users
  media: typeof media
  posts_meta_keywords: typeof posts_meta_keywords
  posts: typeof posts
  categories_meta_keywords: typeof categories_meta_keywords
  categories: typeof categories
  tours_media_files_media_files: typeof tours_media_files_media_files
  tours_meta_keywords: typeof tours_meta_keywords
  tours: typeof tours
  payload_locked_documents: typeof payload_locked_documents
  payload_locked_documents_rels: typeof payload_locked_documents_rels
  payload_preferences: typeof payload_preferences
  payload_preferences_rels: typeof payload_preferences_rels
  payload_migrations: typeof payload_migrations
  top_header: typeof top_header
  header_blocks_nav_link_3: typeof header_blocks_nav_link_3
  header_blocks_nav_link_2: typeof header_blocks_nav_link_2
  header_blocks_nav_link_1: typeof header_blocks_nav_link_1
  header: typeof header
  header_rels: typeof header_rels
  infor: typeof infor
  relations_users: typeof relations_users
  relations_media: typeof relations_media
  relations_posts_meta_keywords: typeof relations_posts_meta_keywords
  relations_posts: typeof relations_posts
  relations_categories_meta_keywords: typeof relations_categories_meta_keywords
  relations_categories: typeof relations_categories
  relations_tours_media_files_media_files: typeof relations_tours_media_files_media_files
  relations_tours_meta_keywords: typeof relations_tours_meta_keywords
  relations_tours: typeof relations_tours
  relations_payload_locked_documents_rels: typeof relations_payload_locked_documents_rels
  relations_payload_locked_documents: typeof relations_payload_locked_documents
  relations_payload_preferences_rels: typeof relations_payload_preferences_rels
  relations_payload_preferences: typeof relations_payload_preferences
  relations_payload_migrations: typeof relations_payload_migrations
  relations_top_header: typeof relations_top_header
  relations_header_blocks_nav_link_3: typeof relations_header_blocks_nav_link_3
  relations_header_blocks_nav_link_2: typeof relations_header_blocks_nav_link_2
  relations_header_blocks_nav_link_1: typeof relations_header_blocks_nav_link_1
  relations_header_rels: typeof relations_header_rels
  relations_header: typeof relations_header
  relations_infor: typeof relations_infor
}

declare module '@payloadcms/db-postgres' {
  export interface GeneratedDatabaseSchema {
    schema: DatabaseSchema
  }
}
